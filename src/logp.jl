"""
    logprior(model_instance::Model, chain::AbstractMCMC.AbstractChains)

Return an array of log priors evaluated at each sample in an MCMC chain or sample array.

Example:
    
```jldoctest
julia> @model function demo_model(x)
    s ~ InverseGamma(2, 3)
    m ~ Normal(0, sqrt(s))
    for i in 1:length(x)
                x[i] ~ Normal(m, sqrt(s))
    end
end
demo_model (generic function with 2 methods)

julia> using StableRNGs, MCMCChains

julia> rng = StableRNG(123)
StableRNGs.LehmerRNG(state=0x000000000000000000000000000000f7)

julia> val = rand(rng, 500, 2, 3)
500×2×3 Array{Float64, 3}:
[:, :, 1] =
 0.181026    0.263433
 0.36749     0.762454
 0.669058    0.94654
 0.0427306   0.868867
 0.437991    0.906265
 0.48329     0.558984
 0.763974    0.827459
 0.924483    0.736597
 0.515045    0.966827
 0.495042    0.114093
 0.70134     0.489265
 0.693569    0.867234
 0.876273    0.987065
 0.944219    0.482919
 0.739213    0.824262
 ⋮
 0.103866    0.494221
 0.47533     0.864538
 0.97594     0.638122
 0.063996    0.699831
 0.00780044  0.395067
 0.755876    0.400533
 0.2739      0.175565
 0.973318    0.337066
 0.930787    0.942264
 0.146077    0.459817
 0.410755    0.0794176
 0.770016    0.312727
 0.676963    0.892313
 0.61136     0.0634304
 0.0768056   0.606559

[:, :, 2] =
 0.124993   0.112357
 0.598843   0.398668
 0.682362   0.283058
 0.0241038  0.165438
 0.308107   0.980733
 0.782956   0.274585
 0.21124    0.772331
 0.435111   0.104037
 0.610605   0.151797
 0.737831   0.426415
 0.338639   0.343338
 0.0810963  0.199654
 0.858859   0.923886
 0.847797   0.0127262
 0.553432   0.397772
 ⋮
 0.925461   0.731948
 0.972514   0.161052
 0.0606383  0.401677
 0.211883   0.822142
 0.710227   0.564018
 0.991651   0.290745
 0.401151   0.517758
 0.52277    0.701787
 0.631634   0.533718
 0.544402   0.132847
 0.706127   0.274981
 0.372036   0.986048
 0.943445   0.329579
 0.203314   0.886782
 0.553447   0.164148

[:, :, 3] =
 0.950801   0.432819
 0.457132   0.480515
 0.358365   0.027524
 0.0906524  0.682524
 0.0906396  0.646061
 0.0944409  0.428408
 0.880841   0.788028
 0.935565   0.574513
 0.505625   0.382395
 0.581101   0.709303
 0.405819   0.286478
 0.465678   0.423926
 0.668932   0.831664
 0.641558   0.0827791
 0.311849   0.848705
 ⋮
 0.652521   0.367347
 0.52651    0.336222
 0.176594   0.973352
 0.748731   0.754104
 0.0619507  0.0665547
 0.27748    0.408158
 0.155415   0.816216
 0.273364   0.55913
 0.197207   0.372033
 0.248851   0.812108
 0.57863    0.970562
 0.530468   0.809154
 0.438612   0.339707
 0.860922   0.876219
 0.598552   0.458746

 julia> chain = Chains(val, [:s, :m]) # construct a chain of samples using MCMCChains
 Chains MCMC chain (500×2×3 Array{Float64, 3}):
 
 Iterations        = 1:1:500
 Number of chains  = 3
 Samples per chain = 500
 parameters        = s, m
 
 Summary Statistics
   parameters      mean       std   naive_se      mcse         ess      rhat 
       Symbol   Float64   Float64    Float64   Float64     Float64   Float64 
 
            s    0.4995    0.2832     0.0073    0.0066   1433.4683    0.9986
            m    0.5059    0.2962     0.0076    0.0073   1640.8136    0.9992
 
 Quantiles
   parameters      2.5%     25.0%     50.0%     75.0%     97.5% 
       Symbol   Float64   Float64   Float64   Float64   Float64 
 
            s    0.0244    0.2641    0.5018    0.7469    0.9716
            m    0.0235    0.2453    0.5024    0.7653    0.9746

julia> logprior(demo_model(x), chain)
500×3 Matrix{Float64}:
    -9.50373   -15.4953    -1.79888
    -4.17245    -2.06943   -2.79718
    -2.46858    -1.83923   -3.50242
    -66.7277   -110.712    -25.982
    -3.61932    -5.89889  -25.7193
    -2.70745    -1.74512  -23.2001
    -2.15438    -8.89379   -2.03597
    -1.9854     -2.71641   -1.87162
    -3.13164    -1.92717   -2.4127
    -2.33406    -1.84676   -2.41731
    -1.92823    -3.96488   -3.05882
    -2.30869   -27.1681    -2.68198
    -2.23897    -2.17911   -2.31621
    -1.82155    -1.68249   -1.84968
    -2.18204    -2.21472   -5.41831
    ⋮
    -20.8545     -1.98167   -1.92848
    -3.21623    -1.72229   -2.28177
    -1.91905   -39.7158   -12.3236
    -39.8049     -9.0445    -2.09544
    -376.333      -1.97207  -37.4481
    -1.81717    -1.76025   -5.34647
    -5.19842    -3.33737  -13.6525
    -1.76766    -2.66128   -5.72858
    -2.1707     -2.08873   -8.60283
    -13.2499     -2.12032   -7.23408
    -2.91886    -1.80592   -2.80554
    -1.76654    -4.6315    -2.77524
    -2.37587    -1.75536   -2.80853
    -1.90986    -9.83558   -2.12811
    -31.1938     -2.09607   -2.11326
```   
"""
function logprior(model_instance::Model, chain::AbstractMCMC.AbstractChains, start_idx::Int=1)
    vi = VarInfo(model_instance) # extract variables info from the model
    map(Iterators.product(start_idx:size(chain, 1), 1:size(chain, 3))) do (iteration_idx, chain_idx)
        argvals_dict = OrderedDict(
            vn => chain[iteration_idx, Symbol(vn), chain_idx] for vn_parent in keys(vi) for
            vn in DynamicPPL.TestUtils.varname_leaves(vn_parent, vi[vn_parent])
        )
        DynamicPPL.logprior(model_instance, argvals_dict)
    end
end

"""
    loglikelihoods(model_instance::Model, chain::AbstractMCMC.AbstractChains)

Return an array of log likelihoods evaluated at each sample in an MCMC chain or sample array.

Example:
    
```jldoctest
julia> @model function demo_model(x)
    s ~ InverseGamma(2, 3)
    m ~ Normal(0, sqrt(s))
    for i in 1:length(x)
                x[i] ~ Normal(m, sqrt(s))
    end
end
demo_model (generic function with 2 methods)

julia> using StableRNGs, MCMCChains

julia> rng = StableRNG(123)
StableRNGs.LehmerRNG(state=0x000000000000000000000000000000f7)

julia> val = rand(rng, 500, 2, 3)
500×2×3 Array{Float64, 3}:
[:, :, 1] =
 0.181026    0.263433
 0.36749     0.762454
 0.669058    0.94654
 0.0427306   0.868867
 0.437991    0.906265
 0.48329     0.558984
 0.763974    0.827459
 0.924483    0.736597
 0.515045    0.966827
 0.495042    0.114093
 0.70134     0.489265
 0.693569    0.867234
 0.876273    0.987065
 0.944219    0.482919
 0.739213    0.824262
 ⋮
 0.103866    0.494221
 0.47533     0.864538
 0.97594     0.638122
 0.063996    0.699831
 0.00780044  0.395067
 0.755876    0.400533
 0.2739      0.175565
 0.973318    0.337066
 0.930787    0.942264
 0.146077    0.459817
 0.410755    0.0794176
 0.770016    0.312727
 0.676963    0.892313
 0.61136     0.0634304
 0.0768056   0.606559

[:, :, 2] =
 0.124993   0.112357
 0.598843   0.398668
 0.682362   0.283058
 0.0241038  0.165438
 0.308107   0.980733
 0.782956   0.274585
 0.21124    0.772331
 0.435111   0.104037
 0.610605   0.151797
 0.737831   0.426415
 0.338639   0.343338
 0.0810963  0.199654
 0.858859   0.923886
 0.847797   0.0127262
 0.553432   0.397772
 ⋮
 0.925461   0.731948
 0.972514   0.161052
 0.0606383  0.401677
 0.211883   0.822142
 0.710227   0.564018
 0.991651   0.290745
 0.401151   0.517758
 0.52277    0.701787
 0.631634   0.533718
 0.544402   0.132847
 0.706127   0.274981
 0.372036   0.986048
 0.943445   0.329579
 0.203314   0.886782
 0.553447   0.164148

[:, :, 3] =
 0.950801   0.432819
 0.457132   0.480515
 0.358365   0.027524
 0.0906524  0.682524
 0.0906396  0.646061
 0.0944409  0.428408
 0.880841   0.788028
 0.935565   0.574513
 0.505625   0.382395
 0.581101   0.709303
 0.405819   0.286478
 0.465678   0.423926
 0.668932   0.831664
 0.641558   0.0827791
 0.311849   0.848705
 ⋮
 0.652521   0.367347
 0.52651    0.336222
 0.176594   0.973352
 0.748731   0.754104
 0.0619507  0.0665547
 0.27748    0.408158
 0.155415   0.816216
 0.273364   0.55913
 0.197207   0.372033
 0.248851   0.812108
 0.57863    0.970562
 0.530468   0.809154
 0.438612   0.339707
 0.860922   0.876219
 0.598552   0.458746

 julia> chain = Chains(val, [:s, :m])
 Chains MCMC chain (500×2×3 Array{Float64, 3}):
 
 Iterations        = 1:1:500
 Number of chains  = 3
 Samples per chain = 500
 parameters        = s, m
 
 Summary Statistics
   parameters      mean       std   naive_se      mcse         ess      rhat 
       Symbol   Float64   Float64    Float64   Float64     Float64   Float64 
 
            s    0.4995    0.2832     0.0073    0.0066   1433.4683    0.9986
            m    0.5059    0.2962     0.0076    0.0073   1640.8136    0.9992
 
 Quantiles
   parameters      2.5%     25.0%     50.0%     75.0%     97.5% 
       Symbol   Float64   Float64   Float64   Float64   Float64 
 
            s    0.0244    0.2641    0.5018    0.7469    0.9716
            m    0.0235    0.2453    0.5024    0.7653    0.9746


julia> loglikelihoods(demo_model(x), chain)
500×3 Matrix{Float64}:
    -4130.67   -6739.94   -1553.24
    -1771.29   -1742.56   -1843.49
    -1423.32   -1785.93   -3016.99
    -10539.0   -32755.2    -5440.33
    -1589.6    -1858.79   -5572.8
    -1723.45   -1726.46   -6405.19
    -1418.35   -2484.64   -1413.64
    -1424.23   -2490.62   -1481.99
    -1502.04   -2021.18   -1876.42
    -2296.57   -1621.7    -1526.49
    -1592.96   -2388.81   -2241.18
    -1426.09   -9337.64   -1894.17
    -1390.28   -1393.81   -1440.99
    -1526.04   -1957.08   -2074.9
    -1423.83   -1792.71   -1879.09
        ⋮
    -5511.73   -1425.48   -1725.86
    -1554.73   -1743.97   -1900.62
    -1453.32  -10153.9    -2719.41
    -7568.23   -2433.33   -1440.87
    -81679.2    -1539.65  -14037.7
    -1633.17   -1637.36   -2588.62
    -3206.67   -1916.08   -3117.08
    -1609.38   -1575.79   -2335.33
    -1390.29   -1600.78   -3468.65
    -4149.14   -2157.4    -2180.55
    -2633.63   -1775.59   -1459.57
    -1699.18   -1690.29   -1521.04
    -1426.75   -1621.31   -2065.1
    -2147.92   -2465.56   -1398.76
    -6732.4    -2092.74   -1686.33
```  
"""
function loglikelihoods(model_instance::Model, chain::AbstractMCMC.AbstractChains, start_idx::Int=1)
    vi = VarInfo(model_instance) # extract variables info from the model
    map(Iterators.product(start_idx:size(chain, 1), 1:size(chain, 3))) do (iteration_idx, chain_idx)
        argvals_dict = OrderedDict(
            vn => chain[iteration_idx, Symbol(vn), chain_idx] for vn_parent in keys(vi) for
            vn in DynamicPPL.TestUtils.varname_leaves(vn_parent, vi[vn_parent])
        )
        Distributions.loglikelihood(model_instance, argvals_dict)
    end
end

"""
    logjoint(model_instance::Model, chain::AbstractMCMC.AbstractChains)

Return an array of log posteriors evaluated at each sample in an MCMC chain or sample array.

Example:
    
```jldoctest
julia> using StableRNGs, MCMCChains

julia> rng = StableRNG(123)
StableRNGs.LehmerRNG(state=0x000000000000000000000000000000f7)

julia> val = rand(rng, 500, 2, 3)
500×2×3 Array{Float64, 3}:
[:, :, 1] =
 0.181026    0.263433
 0.36749     0.762454
 0.669058    0.94654
 0.0427306   0.868867
 0.437991    0.906265
 0.48329     0.558984
 0.763974    0.827459
 0.924483    0.736597
 0.515045    0.966827
 0.495042    0.114093
 0.70134     0.489265
 0.693569    0.867234
 0.876273    0.987065
 0.944219    0.482919
 0.739213    0.824262
 ⋮
 0.103866    0.494221
 0.47533     0.864538
 0.97594     0.638122
 0.063996    0.699831
 0.00780044  0.395067
 0.755876    0.400533
 0.2739      0.175565
 0.973318    0.337066
 0.930787    0.942264
 0.146077    0.459817
 0.410755    0.0794176
 0.770016    0.312727
 0.676963    0.892313
 0.61136     0.0634304
 0.0768056   0.606559

[:, :, 2] =
 0.124993   0.112357
 0.598843   0.398668
 0.682362   0.283058
 0.0241038  0.165438
 0.308107   0.980733
 0.782956   0.274585
 0.21124    0.772331
 0.435111   0.104037
 0.610605   0.151797
 0.737831   0.426415
 0.338639   0.343338
 0.0810963  0.199654
 0.858859   0.923886
 0.847797   0.0127262
 0.553432   0.397772
 ⋮
 0.925461   0.731948
 0.972514   0.161052
 0.0606383  0.401677
 0.211883   0.822142
 0.710227   0.564018
 0.991651   0.290745
 0.401151   0.517758
 0.52277    0.701787
 0.631634   0.533718
 0.544402   0.132847
 0.706127   0.274981
 0.372036   0.986048
 0.943445   0.329579
 0.203314   0.886782
 0.553447   0.164148

[:, :, 3] =
 0.950801   0.432819
 0.457132   0.480515
 0.358365   0.027524
 0.0906524  0.682524
 0.0906396  0.646061
 0.0944409  0.428408
 0.880841   0.788028
 0.935565   0.574513
 0.505625   0.382395
 0.581101   0.709303
 0.405819   0.286478
 0.465678   0.423926
 0.668932   0.831664
 0.641558   0.0827791
 0.311849   0.848705
 ⋮
 0.652521   0.367347
 0.52651    0.336222
 0.176594   0.973352
 0.748731   0.754104
 0.0619507  0.0665547
 0.27748    0.408158
 0.155415   0.816216
 0.273364   0.55913
 0.197207   0.372033
 0.248851   0.812108
 0.57863    0.970562
 0.530468   0.809154
 0.438612   0.339707
 0.860922   0.876219
 0.598552   0.458746

 julia>  chain = Chains(val, [:s, :m]) # construct a chain of samples using MCMCChains
 Chains MCMC chain (500×2×3 Array{Float64, 3}):
 
 Iterations        = 1:1:500
 Number of chains  = 3
 Samples per chain = 500
 parameters        = s, m
 
 Summary Statistics
   parameters      mean       std   naive_se      mcse         ess      rhat 
       Symbol   Float64   Float64    Float64   Float64     Float64   Float64 
 
            s    0.4995    0.2832     0.0073    0.0066   1433.4683    0.9986
            m    0.5059    0.2962     0.0076    0.0073   1640.8136    0.9992
 
 Quantiles
   parameters      2.5%     25.0%     50.0%     75.0%     97.5% 
       Symbol   Float64   Float64   Float64   Float64   Float64 
 
            s    0.0244    0.2641    0.5018    0.7469    0.9716
            m    0.0235    0.2453    0.5024    0.7653    0.9746

julia> logjoint(demo_model(x), chain, 100)
401×3 Matrix{Float64}:
    -2025.91   -1458.8    -1536.82
    -1700.44   -2697.42   -1531.88
    -1618.02   -3476.19   -1550.19
    -2094.43   -1774.56   -2739.01
    -1701.21   -1543.22   -1434.27
    -3252.53   -1655.19   -2350.89
    -1407.15   -1476.78   -4667.16
    -1392.67   -1910.5    -1730.32
    -3775.11   -1804.75   -1535.41
    -1602.54   -1679.16   -1932.07
    -1703.7    -2608.63   -1505.0
    -1401.68   -2128.77   -1460.04
    -1418.54   -1409.34   -3038.4
    -1702.97   -1586.78   -1758.35
    -5507.52   -1674.26   -1874.96
        ⋮
    -5532.58   -1427.46   -1727.79
    -1557.94   -1745.69   -1902.9
    -1455.24  -10193.6    -2731.73
    -7608.04   -2442.37   -1442.97
    -82055.5    -1541.63  -14075.2
    -1634.99   -1639.12   -2593.97
    -3211.87   -1919.42   -3130.73
    -1611.15   -1578.45   -2341.06
    -1392.46   -1602.87   -3477.25
    -4162.39   -2159.52   -2187.78
    -2636.55   -1777.4    -1462.37
    -1700.94   -1694.92   -1523.81
    -1429.13   -1623.07   -2067.91
    -2149.83   -2475.39   -1400.89
    -6763.59   -2094.83   -1688.45
```   
"""
function logjoint(model_instance::Model, chain::AbstractMCMC.AbstractChains, start_idx::Int=1)
    vi = VarInfo(model_instance) # extract variables info from the model
    map(Iterators.product(start_idx:size(chain, 1), 1:size(chain, 3))) do (iteration_idx, chain_idx)
        argvals_dict = OrderedDict(
            vn => chain[iteration_idx, Symbol(vn), chain_idx] for vn_parent in keys(vi) for
            vn in DynamicPPL.TestUtils.varname_leaves(vn_parent, vi[vn_parent])
        )
        Distributions.loglikelihood(model_instance, argvals_dict) +
        DynamicPPL.logprior(model_instance, argvals_dict)
    end
end